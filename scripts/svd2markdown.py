#!/usr/bin/env python3

import argparse
import xml.etree.ElementTree as ET
import pysvd

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description = 'Import into redmine')
    parser.add_argument('--svd', type = str, help = 'System view description (SVD) file', required = True)
    parser.add_argument('--output', type = str, help = 'Markdown output file', required = True)
    args = parser.parse_args()

    node = ET.parse(args.svd).getroot()
    device = pysvd.element.Device(node)

    output = open(args.output, "w")
    output.write("Autogenerated markdown with pysvd {}\n\n".format(pysvd.__version__))

    # Memory mapping
    output.write("# Memory mapping\n\n")
    output.write("| **Address** | **Peripheral** |\n")
    output.write("|-------------|----------------|\n")
    peripheral_baseAddress = device.peripheral.copy()
    peripheral_baseAddress.sort(key=lambda peripheral: peripheral.baseAddress)
    for peripheral in peripheral_baseAddress:
        output.write("| 0x{:X} | {} |\n".format(peripheral.baseAddress, peripheral.name))
    output.write("\n")

    # Interrupt mapping
    output.write("# Interrupt mapping\n\n")
    output.write("| **Interrupt** | **Peripheral** |\n")
    output.write("|---------------|----------------|\n")
    peripheral_interrupt = device.peripheral.copy()
    peripheral_interrupt.sort(key=lambda peripheral: peripheral.interrupt.value if hasattr(peripheral, 'interrupt') else 0)
    for peripheral in peripheral_interrupt:
        if hasattr(peripheral, 'interrupt'):
            output.write("| {} | {} |\n".format(peripheral.interrupt.value, peripheral.name))
    output.write("\n")

    # Peripheral
    output.write("# Peripheral\n\n")

    for peripheral in device.peripheral:
        output.write("## {} ({})\n\n".format(peripheral.description, peripheral.name))

        for register in peripheral.register:
            output.write("### {}\n\n".format(register.description))

            output.write("* **Name:** {}\n".format(register.name))
            output.write("* **Size:** {}\n".format(register.size))
            output.write("* **Offset:** 0x{:X}\n".format(register.addressOffset))
            output.write("* **Reset:** 0x{:X}\n".format(register.resetValue))
            output.write("* **Access:** {}\n".format(register.access))

            output.write("* {} {}\n".format(register.name, register.description))

    output.write("\n")
    output.write("| Header | Title | Caption |\n")
    output.write("|---|---|---|\n")
    output.write("| a | b | c |\n")
    output.write("| a |   | c |\n")
    output.write("|       | c |\n")


    output.close()
